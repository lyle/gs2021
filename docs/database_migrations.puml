@startuml Database migration
!theme materia

!pragma useVerticalIf on

start
note left: Start the database migration

:Retrieve the previous migration name;
if (Verify current migration) then (fail)
  -[#red]->
  #orangered:Report error;
  note right: Manual changes detected
  kill
endif

partition "**Perform dry run**" {
  :Create test database named by git commit id
            with live database as template;
  if (Migrate) then (fail)
    -[#red]->
    :Drop test database|
    -[#red]->
    #darkorange:Report error;
    note right: Up script error
    kill
  elseif (Verify) then (fail)
    -[#red]->
    :Drop test database|
    -[#red]->
    #darkorange:Report error;
    note right: Bad state error
    kill
  elseif (Revert) then (fail)
    -[#red]->
    :Drop test database|
    -[#red]->
    #darkorange:Report error;
    note right: Reversion error
    kill
  elseif (Verify) then (fail)
    -[#red]->
    :Drop test database|
    -[#red]->
    #darkorange:Report error;
    note right: Dirty roll back
    kill
  elseif (Re-migrate) then (fail)
    -[#red]->
    :Drop test database|
    -[#red]->
    #darkorange:Report error;
    note right: Not idempotent
    kill
  else
  endif
  :Drop test database|
}

partition "**Run migration**" {
  if (Migrate) then (fail)
    -[#red]->
    :Revert|
    -[#red]->
    #orangered:Report error;
    note right: Likely a data conversion failure
    kill
  elseif (Verify) then (fail)
    -[#red]->
    :Revert|
    -[#red]->
    #orangered:Report error;
    note right: Bad state had somehow crept in
    kill
  endif
}

:Store updated database metadata in S3;
#green:Report success;
if (Pipeline status) then (fail)
  -[#red]->
  :Revert to previous migration|
  note right: Something else in the pipeline failed, so roll back
  -[#red]->
  :Report rollback;
  -[#red]->
else (no errors following)
endif

stop
note left: Done

@enduml
